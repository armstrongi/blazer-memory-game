@page "/memory"

<h3>Memory Card Game</h3>

<div class="game-board">
    @for (int i = 0; i < Cards.Count; i++)
    {
        var index = i; // Capture the current value of i
        <button class="card" @onclick="() => FlipCard(index)" disabled="@DisableCard(index)">
            @if (Cards[index].IsFlipped || Cards[index].IsMatched)
            {
                <img src="@Cards[index].ImagePath" />
            }
            else
            {
                <span>?</span>
            }
        </button>
    }
</div>

<div class="game-info" style="display: flex; flex-direction: column; align-items: flex-start; gap: 0.3em;">
    <button @onclick="StartGame">Restart Game</button>

    @if (LowestMoves > 0)
    {
        <span>Best score: @LowestMoves moves</span>
    }
    
    <span>Remaining Pairs: @RemainingPairs</span>
    <span>Moves: @Moves</span>    
    <span>@Message</span>
</div>

@code {
    // Central list (was inline inside StartGame)
    private static readonly List<string> AllAnimals = new()
    {
        "bear","cat","chameleon","crab","dog","dolphin","elephant","fox","frog","gorilla",
        "kangaroo","koala","leopard","lobster","monkey","octopus","panther","parrot","penguin",
        "rabbit","seahorse","seal","shark","sloth","snake","starfish","tiger","toucan","turtle","whale"
    };

    private class CardModel
    {
        public string? Value { get; set; }
        public string? ImagePath { get; set; }
        public bool IsFlipped { get; set; }
        public bool IsMatched { get; set; }
    }

    private List<CardModel> Cards = new();
    private int Moves = 0;
    private int LowestMoves = 0;
    private int flippedIndex1 = -1;
    private int flippedIndex2 = -1;
    private string Message = string.Empty;

    protected override void OnInitialized()
    {
        StartGame();
    }

    private void StartGame()
    {
        const int DesiredPairs = 10; // pick 10 unique animals from the list
        var pairCount = Math.Min(DesiredPairs, AllAnimals.Count);

        // Fisherâ€“Yates shuffle to randomize AllAnimals locally
        var shuffled = new List<string>(AllAnimals);
        for (int i = shuffled.Count - 1; i > 0; i--)
        {
            int j = Random.Shared.Next(i + 1);
            (shuffled[i], shuffled[j]) = (shuffled[j], shuffled[i]);
        }

        // Take first N as the random selection
        var values = shuffled.Take(pairCount).ToList();

        // Duplicate for pairs then shuffle card order
        var allValues = values
            .Concat(values)
            .OrderBy(_ => Random.Shared.Next())
            .ToList();

        Cards = allValues
            .Select(v => new CardModel { Value = v, ImagePath = $"/images/{v}.png" })
            .ToList();

        Moves = 0;
        flippedIndex1 = -1;
        flippedIndex2 = -1;
        Message = string.Empty;
        StateHasChanged();
    }

    private async Task FlipCard(int index)
    {                
        if (index < 0 || index >= Cards.Count)
            return;

        if (Cards[index].IsFlipped || Cards[index].IsMatched || flippedIndex2 != -1)
            return;

        Cards[index].IsFlipped = true;

        if (flippedIndex1 == -1)
        {
            flippedIndex1 = index;
        }
        else
        {
            flippedIndex2 = index;
            Moves++;
            StateHasChanged();
            await Task.Delay(1000);
            CheckForMatch();
            StateHasChanged();
        }
    }

    private bool DisableCard(int index)
    {        
        return Cards[index].IsMatched || Cards[index].IsFlipped;
    }
    private void CheckForMatch()
    {
        if (Cards[flippedIndex1].Value == Cards[flippedIndex2].Value)
        {
            Cards[flippedIndex1].IsMatched = true;
            Cards[flippedIndex2].IsMatched = true;
            Message = "Match!";
        }
        else
        {
            Cards[flippedIndex1].IsFlipped = false;
            Cards[flippedIndex2].IsFlipped = false;
            Message = "Try again!";
        }
        flippedIndex1 = -1;
        flippedIndex2 = -1;
        if (Cards.All(c => c.IsMatched))
        {
            Message = $"You won in {Moves} moves!";

            if (LowestMoves == 0 || Moves < LowestMoves)
            {
                LowestMoves = Moves;
            }
        }
    }
    private int RemainingPairs => Cards.Count(c => !c.IsMatched) / 2;
}
